#include <iostream>
#include <queue>
#include <vector>
#include <thread>
#include <mutex>
#include <condition_variable>
#include <chrono>

struct Task {
    int id;
    int burstTime;
    int priority;

    bool operator<(const Task& other) const {
        return priority < other.priority;
    }
};

class CPUScheduler {
public:
    void addTask(const Task& task) {
        std::lock_guard<std::mutex> lock(mutex);
        tasks.push(task);
        cv.notify_one();
    }

    void run() {
        while (true) {
            Task task;
            {
                std::unique_lock<std::mutex> lock(mutex);
                cv.wait(lock, [this] { return !tasks.empty(); });
                task = tasks.top();
                tasks.pop();
            }
            executeTask(task);
        }
    }

private:
    void executeTask(const Task& task) {
        std::cout << "Executing task " << task.id << " with priority " << task.priority << std::endl;
        std::this_thread::sleep_for(std::chrono::milliseconds(task.burstTime));
    }

    std::priority_queue<Task> tasks;
    std::mutex mutex;
    std::condition_variable cv;
};

int main() {
    CPUScheduler scheduler;
    std::thread schedulerThread(&CPUScheduler::run, &scheduler);

    scheduler.addTask({1, 1000, 2});
    scheduler.addTask({2, 500, 1});
    scheduler.addTask({3, 2000, 3});

    schedulerThread.join();
    return 0;
}
